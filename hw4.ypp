%{
	#include "hw4.hpp"
	#include "output.hpp"
	#include "symTable.hpp"
	#include <iostream>
	#include <vector>
	#include <stack>
	
	using namespace std;
	using namespace output;

	extern int yylex();
	extern int yylineno;
	extern const char* yytext;
	
	void yyerror(const char*);
	bool isTemperture(string type);
	bool checkAssignmentTyps(string t1, string t2);
	string findVarType(string id);

	vector<SymTable> tablesStack;
	stack<int> offsetStack;

	bool condScopeFlag = false;
	int whileCounter = 0;

	#define OFFSET_SIZE 1
%}




%token LP RP LC RC SC CELSIUS FAHRENHEIT KELVIN INT PRINT INPUT ID STRING TRUE FALSE BOOL IF ELSE WHILE BREAK NUM SWITCH CASE COLON

%nonassoc IFX
%nonassoc ELSE
%right ASSIGN
%left OR
%left AND
%left EQ_OP
%left REL_OP
%left PLUS MINUS
%left MULT DIV
%right NOT

%%   

Prog	:	InitMarker stmts
				
InitMarker	:	{
					tablesStack.push_back(SymTable());
					offsetStack.push(0);
				}

WhileMarker	 :	{
					whileCounter++;
					}
			

EndScopeMarker	:	{
						condScopeFlag = false;
						endScope();
						tablesStack.back().printTable();
						tablesStack.pop_back();
						offsetStack.pop();
					}				
					
StartScopeMarker	:	{
							tablesStack.push_back(SymTable());
							offsetStack.push(offsetStack.top());
						}
						
stmts	:  	stmt aux
aux		: 	stmt aux
			|
stmt	: 	LC StartScopeMarker stmts EndScopeMarker RC		
			| Type ID SC
				{
					$2.type = $1.type;
					if (condScopeFlag){
						tablesStack.push_back(SymTable());
						offsetStack.push(offsetStack.top());
					}
					if (tablesStack.back().isVarDefined($2.id)) {
						errorDef(yylineno, $2.id.c_str());
						exit(1);
					}
					int newOffset = offsetStack.top() + OFFSET_SIZE;
					tablesStack.back().insertVar($2.id, $2.type, newOffset);
					offsetStack.pop();
					offsetStack.push(newOffset);
					if (condScopeFlag) {
						condScopeFlag = false;
						endScope();
						tablesStack.back().printTable();
						tablesStack.pop_back();
						offsetStack.pop();
					}			
				}
				
			| ID ASSIGN Exp SC
				{
					string idType = findVarType($1.id);
					if (idType == string("")) {
						errorUndef(yylineno, $1.id.c_str());
						exit(1);
					}
					
					if (!checkAssignmentTyps(idType, $3.type)) {
						errorMismatch(yylineno);
						exit(1);
					}
					$1.val = $3.val; 
				}
			| PRINT ID SC
				{
					string idType = findVarType($2.id);
					if (idType == string("")){
						errorUndef(yylineno, $2.id.c_str());
						exit(1);
					}
					if (idType == string("bool")){
						errorMismatch(yylineno);
						exit(1);
					}
				}
			| PRINT STRING SC
			| INPUT ID SC
				{
					string idType = findVarType($2.id);
					if (idType == string("")){
						errorUndef(yylineno, $2.id.c_str());
						exit(1);
					}
					if (idType == string("bool")){
						errorMismatch(yylineno);
						exit(1);
					}
				}
			| IF LP Exp RP stmt %prec IFX
				{
					if ($3.type != string("bool")){
						errorMismatch(yylineno);
						exit(1);
					}
					if ($3.val == 1){
						condScopeFlag = true;
					}
				}
			| IF LP Exp RP stmt ELSE stmt 
				{
					if ($3.type != string("bool")){
						errorMismatch(yylineno);
						exit(1);
					}
					condScopeFlag = 1;	
				}
			| WHILE LP Exp RP WhileMarker stmt
				{
					whileCounter--;
					if ($3.type != string("bool")){
						errorMismatch(yylineno);
						exit(1);
					}
					if ($3.val == 1){
						condScopeFlag = true;
					}
				}
			| BREAK SC
				{
					if (whileCounter <= 0 ) {
						errorUnexpectedBreak(yylineno);
						exit(1);
					}
				}
			| SWITCH LP Exp RP LC StartScopeMarker CasesList EndScopeMarker RC
				{
					if (!isTemperture($3.type)) {
						errorMismatch(yylineno);
						exit(1);
					} 
				}
		
CasesList : CaseStat CasesList
			| CaseStat
			
CaseStat  : CASE NUM TempType COLON StartScopeMarker stmt BREAK SC EndScopeMarker

TempType  : CELSIUS
				{
					$$.type = $1.type;
					$$.val = $1.val;
				}
			| FAHRENHEIT
				{
					$$.type = $1.type;
					$$.val = $1.val;
				}
			| KELVIN
				{
					$$.type = $1.type;
					$$.val = $1.val;
				}
			
Type	  : TempType
				{
					$$.type = $1.type;
					$$.val = $1.val;
				}
			| INT
				{
					$$.type = $1.type;
					$$.val = $1.val;
				}
			| BOOL
				{
					$$.type = $1.type;
					$$.val = $1.val;
				}
			
Exp		  : LP Exp RP 
				{
					$$.type = $2.type;
					$$.val = $2.val;
				}
			| Exp PLUS Exp
				{
					if ($1.type == string("int") && $3.type == string("int")) {
						$$.type = $1.type;
						$$.val = $1.val + $3.val;
					}
					if (isTemperture($1.type) && isTemperture($3.type)) {
						$$.type = $1.type;
					//	$$.val = $1.val + $3.val;
					}
					errorMismatch(yylineno);
					exit(1);
				}
			| Exp MINUS Exp
				{
					if ($1.type == string("int") && $3.type == string("int")) {
						$$.type = $1.type;
						$$.val = $1.val - $3.val;
					}
					if (isTemperture($1.type) && isTemperture($3.type)) {
						$$.type = $1.type;
					//	$$.val = $1.val - $3.val; //need to convert
					}
					errorMismatch(yylineno);
					exit(1);
				}
			| Exp MULT Exp
				{
					if ($1.type == string("int") && $3.type == string("int")) {
						$$.type = $1.type;
						$$.val = $1.val * $3.val;
					}
					if ($1.type == string("bool") || $3.type == string("bool")) {
						errorMismatch(yylineno);
						exit(1);
					}					
					if (isTemperture($1.type) && isTemperture($3.type)) {
						errorMismatch(yylineno);
						exit(1);
					}
					YYSTYPE temp = isTemperture($1.type) ? $1 : $3;
					YYSTYPE num = !isTemperture($1.type) ? $1 : $3;
					$$.type = temp.type;
					$$.val = temp.val * num.val;
 					
				}
			| Exp DIV Exp
				{
					if ($1.type == string("int") && $3.type == string("int")) {
						$$.type = $1.type;
						$$.val = $1.val / $3.val;
					}
					if (isTemperture($1.type) && isTemperture($3.type)) {
						$$.type = string("int");
					//	$$.val = $1.type / $3.type;
					}
					if (isTemperture($1.type) && $3.type == string("int")) {
						$$.type = $1.type;
						$$.val = $1.val / $3.val;
					}
					errorMismatch(yylineno);
					exit(1);
				}
			| ID
				{
					string varType = findVarType($1.id);
					if (varType == string("")) {
						errorUndef(yylineno, $1.id.c_str());
						exit(1);
					}
					$$.type = varType;
					$$.val = $1.val;
				}
			| NUM
				{
					if ($1.type != string("int")) {
						errorMismatch(yylineno);
						exit(1);
					}
					$$.type = $1.type;
					$$.val = $1.val;
				}
			| NUM TempType 
				{
					if (!(isTemperture($2.type)) ||
					!($1.type == string("int"))) {
						errorMismatch(yylineno);
						exit(1);
					}
					$$.type = $2.type;
					$$.val = $1.val;
				}
			| TRUE
				{
					$$.type = $1.type;
					$$.val = $1.val;
				}
			| FALSE
				{
					$$.type = $1.type;
					$$.val = $1.val;
				}
			| NOT Exp 
				{
					if ($2.type != string("bool")) {
						errorMismatch(yylineno);
						exit(1);
					}
					$$.type = string("bool");
					$$.val = !($2.val);
				}
			| Exp OR Exp
				{
					if ($1.type != string("bool") || $3.type != string("bool")){
						errorMismatch(yylineno);
						exit(1);
					}
					if ($1.val == 1 || $3.val == 1){
						$$.val = 1;
					} else {
						$$.val = 0;
					}
					$$.type = string("bool");
				}
			| Exp AND Exp
				{
					if ($1.type != string("bool") || $3.type != string("bool")){
						errorMismatch(yylineno);
						exit(1);
					}
					if ($1.val == 0 || $3.val == 0){
						$$.val = 0;
					} else {
						$$.val = 1;
					}
					$$.type = string("bool");
				}
			| Exp REL_OP Exp 
				{
					if ($1.type == string("int") && $3.type == string("int")) {
						$$.type = string("bool");
						
					}					
					if (isTemperture($1.type) && isTemperture($3.type)) {
						$$.type = string("bool");
						exit(1);
					}
					/////handle > / < / <= / >=
					errorMismatch(yylineno);
					exit(1);
				}
				
			| Exp EQ_OP Exp
				{
					if ($1.type == string("int") && $3.type == string("int")) {
						$$.type = string("bool");
						$$.val = ($1.val == $3.val);						
					}					
					if (isTemperture($1.type) && isTemperture($3.type)) {
						$$.type = string("bool");
				//		$$.val = ($1.val == $3.val);	
					}
					errorMismatch(yylineno);
					exit(1);
				}

%%

void yyerror(const char*){
	errorSyn(yylineno);
	exit(1);
}

bool checkAssignmentTyps(string t1, string t2) {	
	if (t2 == string("bool") && t1 != string("bool")) return false;
	if (t2 == string("int") && t1 != string("int")) return false;
	if (isTemperture(t2) && !isTemperture(t1)) return false;
	
	return true;
}
string findVarType(string id) {
	for (vector<SymTable>::reverse_iterator iter = tablesStack.rbegin(); iter != tablesStack.rend(); ++iter) {
		if(iter->isVarDefined(id)) {
			return iter->getVarType(id);
		}
	}
	return string("");
}
bool isTemperture(string type) {
	return (type == string("fah") || type == string("cel") || type == string("kel"));
}

int main() {
	return yyparse();
}
