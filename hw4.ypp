%{
	#include "hw4.hpp"
	#include "output.hpp"
	#include "symTable.h"
	#include <iostream>
	#include <vector>
	#include <stack>
	
	using namespace std;
	using namespace output;

	extern int yylex();
	extern int yylineno;
	extern const char* yytext;
	
	void yyerror(const char*);


	vector<SymTable> tableStack;
	stack<int> offsetStack;

	bool condScopeFlag = false;

	#define OFFSET_SIZE 1


	//list<YYSTYPE> variableList;
	//list<YYSTYPE> vectorList;
	//list<list <YYSTYPE> > matrixList;
	//int vector_size;
	//SymTable table;
	
%}




%token LP RP LC RC SC CELSIUS FAHRENHEIT KELVIN INT PRINT INPUT ID STRING TRUE FALSE BOOL IF ELSE WHILE BREAK NUM SWITCH CASE COLON

%nonassoc IFX
%nonassoc ELSE
%right ASSIGN
%left OR
%left AND
%left EQ_OP
%left REL_OP
%left PLUS MINUS
%left MULT DIV
%right NOT

%%   

Prog	:	InitMarker stmts
				
InitMarker	:	{
					tableStack.push_back(SymTable());
					offsetStack.push(0);
				}

EndScopeMarker	:	{
						output::endScope();
						tableStack.back().printTable();
						tableStack.pop_back();
						offsetStack.pop();
					}				
					
StartScopeMarker	:	{
							tableStack.push_back(SymTable());
							offsetStack.push(offsetStack.top());
						}
						
stmts	:  	stmt aux
aux		: 	stmt aux
			|
stmt	: 	LC StartScopeMarker stmts EndScopeMarker RC		
			| Type ID SC
				{
					$2.type = $1.type;
					if (condScopeFlag){
						tableStack.push_back(SymTable());
						offsetStack.push(offsetStack.top());
					}
					if (tableStack.back().isVarDefined($2.id)) {
						output::errorDef(yylineno, $2.id);
						exit(1);
					}
					int newOffset = offsetStack.top() + OFFSET_SIZE;
					tableStack.back().insertVar($2.id, $2.type, newOffset);
					offsetStack.pop();
					offsetStack.push(newOffset);
					if (condScopeFlag) {
						output::endScope();
						tableStack.back().printTable();
						tableStack.pop_back();
						offsetStack.pop();
					}			
				}
				
			| ID ASSIGN Exp SC
				{
					if ($1
			| PRINT ID SC
			| PRINT STRING SC
			| INPUT ID SC
			| IF LP Exp RP stmt %prec IFX
			| IF LP Exp RP stmt ELSE stmt 
			| WHILE LP Exp RP stmt
			| BREAK SC
			| SWITCH LP Exp RP LC StartScopeMarker CasesList EndScopeMarker RC
		
CasesList : CaseStat CasesList
			| CaseStat
			
CaseStat  : CASE NUM TempType COLON StartScopeMarker stmt BREAK SC EndScopeMarker

TempType  : CELSIUS
			| FAHRENHEIT
			| KELVIN
			
Type	  : TempType
			| INT
			| BOOL
			
Exp		  : LP Exp RP
			| Exp PLUS Exp
			| Exp MINUS Exp
			| Exp MULT Exp
			| Exp DIV Exp
			| ID
			| NUM
			| NUM TempType
			| TRUE
			| FALSE
			| NOT Exp
			| Exp OR Exp
			| Exp AND Exp
			| Exp REL_OP Exp
			| Exp EQ_OP Exp


%%

void yyerror(const char*){
	errorSyn(yylineno);
	exit(1);
}

bool checkAssignmentTyps(string t1, string t2) {
	if (t2 == string("bool") && t1 != string("bool")) return false;
	if (t2 == "
	
}
int main() {
	return yyparse();
}
