// This test is supposed to catch errors.
// Error-inducing rows are commented out, because they cause the program to stop,
// so if you want to test for errors un-comment them.

// Test operator precedence.
// For every test, try all combinations of variables / constant matrices.
// Use prime values to make sure results are unique.

// Basic arithmetic:
[2]+[3];		// [5]
[2]-[3];		// [-1]
-[2]+[3];		// [1]
[2]+-[3];		// [-1]
[2]--[3];		// [5]
//[2]++[3];		// SyntaxError
[2]+--[3];		// [5]
[2]*[3];		// [6]
[2]*-[3];		// [-6]
[2]*--[3];		// [6]
[2]+[3]*[5];	// [17]
[2]-[3]*[5];	// [-13]
[2]+-[3]*[5];	// [-13]
[2]*[3]+[5];	// [11]
[2]*-[3]+[5];	// [-1]
[2]*--[3]+[5];	// [11]
[2]*[3]-[5];	// [1]
[2]*-[3]-[5];	// [-11]
[2]*--[3]-[5];	// [1]

// Scalar factoring:
5*[2]+[3];			// [13]
[2]*5+[3];			// [13]
[2]+5*[3];			// [17]
[2]+[3]*5;			// [17]
5*[2]-[3];			// [7]
[2]*5-[3];			// [7]
[2]-5*[3];			// [-13]
[2]-[3]*5;			// [-13]
-5*[2]+[3];			// [-7]
-[2]*5+[3];			// [-7]
[2]*-5+[3];			// [-7]
-[2]*-5+[3];		// [13]
[2]+5*-[3];			// [-13]
[2]+-5*[3];			// [-13]
[2]+-[3]*5;			// [-13]
5*[2]*[3];			// [30]
[2]*5*[3];			// [30]
[2]*[3]*5;			// [30]
7*[2]+[3]*[5];		// [29]
[2]*7+[3]*[5];		// [29]
[2]+7*[3]*[5];		// [107]
[2]+[3]*7*[5];		// [107]
[2]+[3]*[5]*7;		// [107]
7*[2]-[3]*[5];		// [-1]
[2]*7-[3]*[5];		// [-1]
[2]+7*-[3]*[5];		// [-103]
[2]+-7*[3]*[5];		// [-103]
[2]+-[3]*7*[5];		// [-103]
[2]+-[3]*[5]*7;		// [-103]
7*[2]*[3]+[5];		// [47]
[2]*7*[3]+[5];		// [47]
[2]*[3]*7+[5];		// [47]
[2]*[3]+7*[5];		// [41]
[2]*[3]+[5]*7;		// [41]
7*[2]*-[3]+[5];		// [-37]
[2]*7*-[3]+[5];		// [-37]
[2]*-7*[3]+[5];		// [-37]
[2]*-[3]*7+[5];		// [-37]
[2]*-[3]+7*[5];		// [29]
[2]*-[3]+[5]*7;		// [29]
7*[2]*--[3]+[5];	// [47]
[2]*7*--[3]+[5];	// [47]
[2]*-7*-[3]+[5];	// [47]
[2]*--7*[3]+[5];	// [47]
[2]*--[3]*7+[5];	// [47]
[2]*--[3]+7*[5];	// [41]
[2]*--[3]+[5]*7;	// [41]
7*[2]*[3]-[5];		// [37]
[2]*7*[3]-[5];		// [37]
[2]*[3]*7-[5];		// [37]
[2]*[3]-7*[5];		// [-29]
[2]*[3]-[5]*7;		// [-29]
7*[2]*-[3]-[5];		// [-47]
[2]*7*-[3]-[5];		// [-47]
[2]*7*-[3]-[5];		// [-47]
[2]*-7*[3]-[5];		// [-47]
[2]*-[3]*7-[5];		// [-47]
[2]*-[3]-7*[5];		// [-41]
[2]*-[3]-[5]*7;		// [-41]
7*[2]*--[3]-[5];	// [37]
[2]*7*--[3]-[5];	// [37]
[2]*-7*-[3]-[5];	// [37]
[2]*--7*[3]-[5];	// [37]
[2]*--[3]*7-[5];	// [37]
[2]*--[3]-7*[5];	// [-29]
[2]*--[3]-[5]*7;	// [-29]

// Add concatenation (and some transposing, for the product to be defined):
-[3]::[1];										// [-3,-1] (concatention is before unary minus)
transpose([3]::[1]);							// [3,1]
[1;3]::[2;4];									// [1,2;3,4]
transpose([1;3]::[2;4]);						// [1,3;2,4]
//transpose(-[3]);								// [-3]		<---THE GRAMMAR DOESN'T ALLOW THIS! WTF?!
//transpose(-[3]::[2]);							// [-3,-2]		<---THE GRAMMAR DOESN'T ALLOW THIS! WTF?!
[2]::[1]+[3]::[1];								// [5,2]
[2]::[1]-[3]::[1];								// [-1,0]
-[2]::[1]+[3]::[1];								// [1,0]
[2]::[1]+-[3]::[1];								// [-1,0]
[2]::[1]--[3]::[1];								// [5,2]
[2]::[1]+--[3]::[1];							// [5,2]
//[2]::[1]*[3]::[1];								// ArgumentSizeMismatch
[2]::[1]*transpose([3]::[1]);					// [7]
//[2]::[1]*transpose(-[3]::[1]);					// [-5]		<---THE GRAMMAR DOESN'T ALLOW THIS! WTF?!
[2]::[1]*-transpose([3]::[1]);					// [-7]
//[2]::[1]*transpose(--[3]::[1]);					// [7]		<---THE GRAMMAR DOESN'T ALLOW THIS! WTF?!
//[2]::[1]*-transpose(-[3]::[1]);					// [5]		<---THE GRAMMAR DOESN'T ALLOW THIS! WTF?!
[2]::[1]*--transpose([3]::[1]);					// [7]
//[2]::[1]+[3]*[5]::[1];							// [17,4]		<---THE GRAMMAR DOESN'T ALLOW THIS! WTF?!
//[2]::[1]+3*[5]::[1];							// [17,4]		<---THE GRAMMAR DOESN'T ALLOW THIS! WTF?!
//[2]::[1]+[5]::[1]*[3];							// ArgumentSizeMismatch
//[2]::[1]+[5]::[1]*3;							// [17,4]		<---THE GRAMMAR DOESN'T ALLOW THIS! WTF?!
//transpose([2]::[1])+transpose([3]::[1])*[5];	// [17,4] (column)		<---THE GRAMMAR DOESN'T ALLOW THIS! WTF?!
//[2]::[1]-[3]*[5]::[1];	// [-13,-2]		<---THE GRAMMAR DOESN'T ALLOW THIS! WTF?!
//[2]::[1]+-[3]*[5]::[1];	// [-13,-2]		<---THE GRAMMAR DOESN'T ALLOW THIS! WTF?!

// Iteration:
//[1]::[1]*[2]^(2);	// ArgumentSizeMismatch: [1,1]*[4]
[1]::[2]^(2);		// [1,4]
[2]^(2)::[1];		// [4,1]


